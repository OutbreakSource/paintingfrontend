{"version":3,"sources":["UploadImages.js","App.js","reportWebVitals.js","index.js"],"names":["UploadImages","useState","model","setModel","classLabels","setClassLabels","useEffect","loadModel","tf","getClassLabels","loading","setLoading","confidence","setConfidence","predictedClass","setPredictedClass","readImageFile","file","Promise","resolve","reader","FileReader","onload","result","readAsDataURL","createHTMLImageElement","imageSrc","img","Image","src","handleImageChange","files","length","image","tensorImg","fromPixels","resizeNearestNeighbor","toFloat","expandDims","predict","predictions","dataSync","predicted_index","as1D","argMax","Math","round","console","log","Grid","container","className","direction","alignItems","justifyContent","marginTop","item","style","textAlign","marginBottom","acceptedFiles","dropzoneText","onChange","maxFileSize","filesLimit","showAlerts","Stack","width","spacing","Chip","label","variant","Backdrop","sx","color","zIndex","theme","drawer","open","CircularProgress","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.320c1fc3.chunk.js","sourcesContent":["import React, {useState, useEffect, Fragment} from \"react\";\r\nimport \"./style.css\"\r\nimport * as tf from \"@tensorflow/tfjs\";\r\nimport { DropzoneArea } from \"material-ui-dropzone\";\r\nimport { Backdrop, Chip, CircularProgress, Grid, Stack } from \"@mui/material\";\r\n\r\n\r\nexport default function UploadImages() {\r\n    const [model, setModel] = useState(null);\r\n    const [classLabels, setClassLabels] = useState(null);\r\n\r\n    useEffect(() => {\r\n        const loadModel = async () => {\r\n            const model_url = \"https://paintingemotion.s3.us-west-2.amazonaws.com/model.json\";\r\n\r\n            const model = await tf.loadLayersModel(model_url);\r\n\r\n            setModel(model);\r\n        };\r\n\r\n        const getClassLabels = async () => {\r\n\r\n            const testLabel = [\"awe\", \"anger\", \"amusement\", \"contentment\", \"disgust\",\r\n            \"fear\", \"sadness\", \"excitement\"]\r\n\r\n            setClassLabels(testLabel);\r\n        };\r\n\r\n        loadModel();\r\n        getClassLabels();\r\n    }, []);\r\n\r\n\r\n    const [loading, setLoading] = useState(false);\r\n    const [confidence, setConfidence] = useState(null);\r\n    const [predictedClass, setPredictedClass] = useState(null);\r\n\r\n\r\n    const readImageFile = (file) => {\r\n        return new Promise((resolve) => {\r\n            const reader = new FileReader();\r\n\r\n            reader.onload = () => resolve(reader.result);\r\n\r\n            reader.readAsDataURL(file);\r\n        });\r\n    };\r\n\r\n    const createHTMLImageElement = (imageSrc) => {\r\n        return new Promise((resolve) => {\r\n            const img = new Image();\r\n\r\n            img.onload = () => resolve(img);\r\n\r\n            img.src = imageSrc;\r\n        });\r\n    };\r\n\r\n    const handleImageChange = async (files) => {\r\n        if (files.length === 0) {\r\n            setConfidence(null);\r\n            setPredictedClass(null);\r\n        }\r\n\r\n        if (files.length === 1) {\r\n            setLoading(true);\r\n\r\n            const imageSrc = await readImageFile(files[0]);\r\n            const image = await createHTMLImageElement(imageSrc);\r\n\r\n            const [predictedClass, confidence] = tf.tidy(() => {\r\n                const tensorImg = tf.browser.fromPixels(image).resizeNearestNeighbor([120, 120]).toFloat().expandDims();\r\n                const result = model.predict(tensorImg);\r\n\r\n                const predictions = result.dataSync();\r\n                const predicted_index = result.as1D().argMax().dataSync()[0];\r\n\r\n                const predictedClass = classLabels[predicted_index];\r\n                const confidence = Math.round(predictions[predicted_index] * 100);\r\n\r\n                return [predictedClass, confidence];\r\n            });\r\n            console.log(predictedClass)\r\n            setPredictedClass(predictedClass);\r\n            setConfidence(confidence);\r\n            setLoading(false);\r\n        }\r\n\r\n    };\r\n\r\n\r\n\r\n    return (\r\n        <Fragment>\r\n            <Grid container className=\"App\" direction=\"column\" alignItems=\"center\" justifyContent=\"center\" marginTop=\"12%\">\r\n                <Grid item>\r\n                    <h1 style={{ textAlign: \"center\", marginBottom: \"1.5em\" }}>Emotion Analyzer</h1>\r\n                    <DropzoneArea\r\n                        acceptedFiles={[\"image/*\"]}\r\n                        dropzoneText={\"Add an image\"}\r\n                        onChange={handleImageChange}\r\n                        maxFileSize={10000000}\r\n                        filesLimit={1}\r\n                        showAlerts={[\"error\"]}\r\n                    />\r\n                    <Stack style={{ marginTop: \"2em\", width: \"12rem\" }} direction=\"row\" spacing={1}>\r\n                        <Chip\r\n                            label={predictedClass === null ? \"Prediction:\" : `Prediction: ${predictedClass}`}\r\n                            style={{ justifyContent: \"left\" }}\r\n                            variant=\"outlined\"\r\n                        />\r\n                        <Chip\r\n                            label={confidence === null ? \"Confidence:\" : `Confidence: ${confidence}%`}\r\n                            style={{ justifyContent: \"left\" }}\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </Stack>\r\n                </Grid>\r\n            </Grid>\r\n\r\n            <Backdrop sx={{ color: \"#fff\", zIndex: (theme) => theme.zIndex.drawer + 1 }} open={loading}>\r\n                <CircularProgress color=\"inherit\" />\r\n            </Backdrop>\r\n        </Fragment>\r\n    );\r\n\r\n}\r\n\r\n","import './App.css';\r\nimport UploadImages from \"./UploadImages\";\r\nimport React from 'react'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <UploadImages/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}